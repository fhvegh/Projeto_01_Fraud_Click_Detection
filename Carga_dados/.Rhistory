install.packages("cattonum")
head(iris)
cattonum::catto_onehot(iris)
cattonum::catto_onehot(iris)
cattonum::catto_onehot(head(iris))
cattonum::catto_onehot(head(iris,20))
cattonum::catto_onehot(head(iris,20))
cattonum::catto_onehot(iris)
head(iris)
ip <- c(33325,22158,33464,77549,6674,77213,55846,222156,223694,88463,
22158,33464,22158,77213,22158)
app <- c(12,23,4,12,4,4,35,46,2,4,4,2,25,4,4)
device <- c(1,1,0,1,1,1,1,2,1,1,0,1,1,1)
df <- data.frame(ip,app,device)
df
ip <- c(33325,22158,33464,77549,6674,77213,55846,222156,223694,88463,
22158,33464,22158,77213,22158)
app <- c(12,23,4,12,4,4,35,46,2,4,4,2,25,4,4)
device <- c(1,1,0,1,1,1,1,2,1,1,0,1,1,1)
df <- data.frame(ip,app,device)
ip <- c(33325,22158,33464,77549,6674,77213,55846,222156,223694,88463,
22158,33464,22158,77213,22158)
app <- c(12,23,4,12,4,4,35,46,2,4,4,2,25,4,4)
device <- c(1,1,0,1,1,1,1,2,1,1,0,1,1,1,0)
df <- data.frame(ip,app,device)
df
cattonum::catto_onehot(df)
df$target <- c(0,0,0,0,0,1,0,0,0,1,0,0,0,0,0)
df$target <- as.factor(df$target)
str(df)
df
cattonum::catto_onehot(df)
cattonum::cattonum_df(iris)
head(iris)
cattonum::cattonum_df(iris)
cattonum::catto_aggregate(iris)
cattonum::catto_dummy(iris)
df
cattonum::catto_dummy(df)
cattonum::catto_freq(df)
df
design_mat <- cbind( data.frame( matrix(rnorm(5*100),ncol = 5) ),
sample( sample(letters, 10), 100, replace = TRUE))
design_mat
head(design_mat)
head(design_mat)
colnames(design_mat)[6] <- "factor_var"
head(design_mat)
encode_categories( design_mat, method = "mean" )
data(iris)
head(data)
encoder <- onehot(iris)
install.packages("onehot")
encoder <- onehot(iris, addNA=TRUE)
library(onehot)
head(iris)
View(iris)
encoder <- onehot(iris)
encoder
encoder <- onehot(iris, stringsAsFactors=TRUE)
encoder
encoder <- onehot(iris, max_levels=5)
encoder
View(encodere)
View(encoder)
e <- as.data.frame(encoder)
design_mat <- cbind( data.frame( matrix(rnorm(5*100),ncol = 5) ),
sample( sample(letters, 10), 100, replace = TRUE))
design_mat
head(design_mat)
colnames(design_mat)[6] <- "factor_var"
head(design_mat)
encode_dummy(X = design_mat, fact = "factor_var", keep_factor = FALSE)
install.packages("categoryEncodings")
encode_dummy(X = design_mat, fact = "factor_var", keep_factor = FALSE)
library(categoryEncodings)
library(categoryEncodings)
x = 25
if (x < 30)
{"Este número é menor que 30"}
if (x < 7) {
"Este número é menor que 7"
} else {
"Este número não é menor que 7"
}
x = 5
ifelse (x < 6, "Correto!", NA)
func1 <- function(x,y){
ifelse(y < 7, x + y, "Não encontrado")
}
func1(4,2)
func1(40,7)
rep(rnorm(10), 5)
?rep
for (i in 1:20) {print(i)}
for (q in rnorm(10)) {print(q)}
for(i in 1:22){
if(i == 13 | i == 15)
next
print (i)}
for(i in 1:22){
if(i == 13)
break
print (i)}
x = 1
while(x < 5){
x = x + 1
print(x)
}
?sample
args(sample)
args(mean)
args(sd)
vec1 <- c(1.5, 2.5, 8.4, 3.7, 6.3)
vec2 <- rev(vec1)
vec2
lista1 <- list(a = (1:20), b = (35:67))
valor_a = 0
valor_b = 0
for (i in lista1$a){
valor_a = valor_a + i
}
for (j in lista1$b){
valor_b = valor_b + j
}
print(valor_a)
print(valor_b)
sapply(lista1, sum)
sapply(lista1, mean)
escola <- data.frame(Aluno = c('Bob', 'Tereza', 'Marta', 'Felipe', 'Zacarias', 'Elton'),
Fisica = c(91, 82, 75, 97, 62, 74),
Matematica = c(99, 100, 86, 92, 91, 87),
Quimica = c(56, 72, 49, 68, 59, 77))
escola
escola
escola$Matematica
escola$Media = NA
escola
escola$Media = apply(escola[,c(2, 3, 4)], 1, mean)
escola
escola$Media = round(escola$Media)
escola
# Aplicando apply() a um Dataframe
?apply
?sqldf
library(sqldf)
install.packages('sqldf')
library(sqldf)
?gl
tabela_basquete <-
data.frame(equipe = gl(5, 5, labels = paste("Equipe", LETTERS[1:5])),
jogador = sample(letters, 25),
num_cestas = floor(runif(25, min=0, max=50)))
View(tabela_basquete)
summary(tabela_basquete)
sqldf("select equipe, sum(num_cestas) from tabela_basquete group by equipe")
class(tabela_basquete)
tapply(tabela_basquete$num_cestas, tabela_basquete$equipe, sum)
tapply(tabela_basquete$num_cestas, tabela_basquete$equipe, mean)
version(R)
install.packages(c("plotly", "png"))
library(RSQLite)
library(dplyr)
library(tidyr)
library(arules)
library(arulesSequences)
library(readr)
library(stringr)
library(visNetwork)
library(igraph)
library(lubridate)
library(DT)
install.packages("RSQLite")
library(dplyr)
library(RSQLite)
library(tidyr)
library(arules)
install.packages("arules")
library(arules)
library(arulesSequences)
install.packages("arulesSequences")
library(arulesSequences)
library(readr)
library(stringr)
library(visNetwork)
install.packages("visNetwork")
library(visNetwork)
library(igraph)
library(lubridate)
library(DT)
install.packages("DT")
library(DT)
install.packages("RMySQL")
?getSymbols
library(quantmod)
# e o serviço de cotações online pode estar instável
?getSymbols
startDate = as.Date("2019-01-02")
endDate = as.Date("2021-12-20")
getSymbols(Symbols = c("NVDA","AMZN","PFE"), src = "yahoo", from = startDate, to = endDate, auto.assign = T)
Ativos <- c("NVDA","AMZN","PFE")
getSymbols(Symbols = Ativos, src = "yahoo", from = startDate, to = endDate, auto.assign = T)
getSymbols(Symbols = "Ativos", src = "yahoo", from = startDate, to = endDate, auto.assign = T)
startDate = as.Date("2019-01-02")
endDate = as.Date("2021-12-20")
getSymbols(Symbols = "Ativos", src = "yahoo", from = startDate, to = endDate, auto.assign = T)
getSymbols(Symbols = Ativos, src = "yahoo", from = startDate, to = endDate, auto.assign = T)
View(Ativos)
getSymbols(Symbols = "NVDA" , src = "yahoo", from = startDate, to = endDate, auto.assign = T)
class(NVDA) # xts e zoo são tipos de dados para série temporal
is.xts(NVDA)
head(NVDA)
View(NVDA)
NVDA <- getSymbols(Symbols = "NVDA" , src = "yahoo", from = startDate, to = endDate, auto.assign = T)
head(NVDA)
# Amazon.com, Inc. - AMZN
getSymbols(Symbols = "AMZN" , src = "yahoo", from = startDate, to = endDate, auto.assign = T)
# Checando o tipo de dado retornado
class(AMZN) # xts e zoo são tipos de dados para série temporal
is.xts(AMZN)
# Mostra os primeiros registros para as ações da Petrobras
head(AMZN)
View(AMZN)
# Pfizer Inc. - PFE
getSymbols(Symbols = "PFE" , src = "yahoo", from = startDate, to = endDate, auto.assign = T)
# Checando o tipo de dado retornado
class(PFE) # xts e zoo são tipos de dados para série temporal
is.xts(PFE)
# Mostra os primeiros registros para as ações da Petrobras
head(PFE)
View(PFE)
# Pfizer Inc. - PFE
getSymbols(Symbols = "PFE" , src = "yahoo", from = startDate, to = endDate, auto.assign = T)
# Checando o tipo de dado retornado
class(PFE) # xts e zoo são tipos de dados para série temporal
is.xts(PFE)
# Mostra os primeiros registros para as ações da Pfzer
head(PFE)
View(PFE)
# NVIDIA Corporation - NVDA
getSymbols(Symbols = "NVDA" , src = "yahoo", from = startDate, to = endDate, auto.assign = T)
# Checando o tipo de dado retornado
class(NVDA) # xts e zoo são tipos de dados para série temporal
is.xts(NVDA)
# Mostra os primeiros registros para as ações da Nvidia
head(NVDA)
View(NVDA)
Ativos <- cbind(NVDA,AMZN,PFE)
View(Ativos)
nvdia.close <- NVDA[,"NVDA.Close"]
amzn.close <- AMZN[,"AMZN.Close"]
pfe.close <- PFE[,"PFE.Close"]
?Cl
getSymbols("PETR4.SA", src = "yahoo", from = startDate, to = endDate, auto.assign = T)
# PETR4.SA = readRDS("PETR4.SA.rds")
View(PETR4.SA)
PETR4.SA.Close <- PETR4.SA[, "PETR4.SA.Close"]
is.xts(PETR4.SA.Close)
head(PETR4.SA)
head(Cl(PETR4.SA),5)
candleChart(PETR4.SA)
plot(PETR4.SA.Close, main = "Fechamento Diário Ações Petrobras",
col = "red", xlab = "Data", ylab = "Preço", major.ticks = 'months',
minor.ticks = FALSE)
plot(nvdia.close, main = "Fechamento Diário Ações Nvidia",
col = "red", xlab = "Data", ylab = "Preço", major.ticks = 'months',
minor.ticks = FALSE)
plot(amzn.close, main = "Fechamento Diário Ações",
col = "blue", xlab = "Data", ylab = "Preço", major.ticks = 'months',
minor.ticks = FALSE)
plot(pfe.close, main = "Fechamento Diário Ações",
col = "green", xlab = "Data", ylab = "Preço", major.ticks = 'months',
minor.ticks = FALSE)
plot(pfe.close, main = "Fechamento Diário Ações",
col = "green", xlab = "Data", ylab = "Preço", major.ticks = 'months',
minor.ticks = FALSE)
plot(c(nvdia.close,amzn.close,pfe.close), main = "Fechamento Diário Ações",
col = "blue", xlab = "Data", ylab = "Preço", major.ticks = 'months',
minor.ticks = FALSE)
plot(nvdia.close, main = "Fechamento Diário Ações",
col = "red", xlab = "Data", ylab = "Preço", major.ticks = 'months',
minor.ticks = FALSE) +
plot(amzn.close, main = "Fechamento Diário Ações",
col = "blue", xlab = "Data", ylab = "Preço", major.ticks = 'months',
minor.ticks = FALSE) +
plot(pfe.close, main = "Fechamento Diário Ações",
col = "green", xlab = "Data", ylab = "Preço", major.ticks = 'months',
minor.ticks = FALSE)
plot(nvdia.close, main = "Fechamento Diário Ações",
col = "red", xlab = "Data", ylab = "Preço", major.ticks = 'months',
minor.ticks = FALSE)
plot(amzn.close, main = "Fechamento Diário Ações",
col = "blue", xlab = "Data", ylab = "Preço", major.ticks = 'months',
minor.ticks = FALSE)
plot(pfe.close, main = "Fechamento Diário Ações",
col = "green", xlab = "Data", ylab = "Preço", major.ticks = 'months',
minor.ticks = FALSE)
plot(nvdia.close, main = "Fechamento Diário Ações",
col = "red", xlab = "Data", ylab = "Preço", major.ticks = 'months',
minor.ticks = FALSE)
addSeries(amzn.close,type = "l")
plot(nvdia.close, main = "Fechamento Diário Ações",
col = "blue", xlab = "Data", ylab = "Preço", major.ticks = 'months',
minor.ticks = FALSE)
addSeries(amzn.close,type = "l")
plot(nvdia.close, main = "Fechamento Diário Ações",
col = "blue", xlab = "Data", ylab = "Preço", major.ticks = 'months',
minor.ticks = FALSE)
plot(nvdia.close, main = "Fechamento Diário Ações",
col = "red", xlab = "Data", ylab = "Preço", major.ticks = 'months',
minor.ticks = FALSE)
addSeries(amzn.close,type = "l",col = "blue")
addSeries(pfe.close,type = "l",col = "green")
addSeries(amzn.close,type = "l",col = "blue",main = "Amazon")
plot(nvdia.close, main = "Nvidia",
col = "red", xlab = "Data", ylab = "Preço", major.ticks = 'months',
minor.ticks = FALSE)
addSeries(amzn.close,type = "l",col = "blue",main = "Amazon")
addSeries(pfe.close,type = "l",col = "green",main = "Pfzer")
plot(nvdia.close, main = "Nvidia",
col = "red", xlab = "Data", ylab = "Preço", major.ticks = 'months',
minor.ticks = FALSE)
addSeries(amzn.close,type = "l",col = "blue",main = "Amazon")
addSeries(pfe.close,type = "l",col = "green",main = "Pfzer")
Ativos.close <- c(nvdia.close,amzn.close,pfe.close)
# Seleção do período de análise
startDate = as.Date("2019-01-02")
endDate = as.Date("2021-12-20")
getSymbols(Symbols = "NVDA" , src = "yahoo", from = startDate, to = endDate, auto.assign = T)
# Checando o tipo de dado retornado
class(NVDA) # xts e zoo são tipos de dados para série temporal
is.xts(NVDA)
# Mostra os primeiros registros para as ações da Nvidia
head(NVDA)
View(NVDA)
# Amazon.com, Inc. - AMZN
getSymbols(Symbols = "AMZN" , src = "yahoo", from = startDate, to = endDate, auto.assign = T)
# Checando o tipo de dado retornado
class(AMZN) # xts e zoo são tipos de dados para série temporal
is.xts(AMZN)
# Mostra os primeiros registros para as ações da Amazon
head(AMZN)
View(AMZN)
# Pfizer Inc. - PFE
getSymbols(Symbols = "PFE" , src = "yahoo", from = startDate, to = endDate, auto.assign = T)
# Checando o tipo de dado retornado
class(PFE) # xts e zoo são tipos de dados para série temporal
is.xts(PFE)
# Mostra os primeiros registros para as ações da Pfzer
head(PFE)
View(PFE)
Ativos <- cbind(NVDA,AMZN,PFE)
View(Ativos)
nvdia.close <- NVDA[,"NVDA.Close"]
amzn.close <- AMZN[,"AMZN.Close"]
pfe.close <- PFE[,"PFE.Close"]
Ativos.close <- c(nvdia.close,amzn.close,pfe.close)
library(dplyr)
library(ggplot2)
head(Ativos.close)
Ativos.close
View(Ativos.close)
ggplot(aes(x = "Data",y = "nvdia.close")) +
geom_line()
p <- ggplot(nvdia.close, aes(x=day, y=value)) +
geom_line() +
xlab("")
p
p <- ggplot(nvdia.close, aes(x=Data, y=value)) +
geom_line() +
xlab("")
p
df <- as.data.frame(nvdia.close)
head(df)
df$index <- range(1:length(nvdia.close))
head(df)
setwd("C:/My_Development/Projetos/Fraud_Click_Detection/Carga_Dados")
setwd("C:/My_Development/Projetos/Projeto_01_Fraud_Click_Detectionn/Carga_dados")
